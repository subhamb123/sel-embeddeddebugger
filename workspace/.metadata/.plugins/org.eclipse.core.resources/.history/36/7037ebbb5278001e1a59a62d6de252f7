/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdint.h>
#include "platform.h"
#include "xil_printf.h"

int add (int a, int b);
int subtract (int a, int b);

void printStack(uintptr_t baseAddress, size_t size)
{
    // Declare a pointer to an unsigned integer (assuming 4 bytes per word)
    unsigned int *ptr = (unsigned int *)baseAddress;

    // Iterate through the stack memory and print each value
    for (size_t i = 0; i < size / sizeof(unsigned int); ++i) {
        // Print the value at the current memory location
        xil_printf("\n\rAddress: 0x%08lx, Value: 0x%08x", (unsigned long)(ptr + i), *(ptr + i));
    }

    // Send END
    xil_printf("!");
}

void print32BitRegisters()
{
	// Allocate memory for register values
	uint32_t register_values[64];

    // Array of register names
    const char* register_names[] = {
    		"FPCR",
    		"FPSR",
    		"MPIDR_EL1",
    		"IFSR32_EL2",
    		"ESR_EL3",
    		"ISR_EL1",
    		"SCTLR_EL3",
    		"TCR_EL3",
    		"CONTEXTIDR_EL1",
    		"CPACR_EL1",
    		"ACTLR_EL3",
    		"PMCR_EL0",
    		"PMCNTENSET_EL0",
    		"PMOVSCLR_EL0",
    		"PMUSERENR_EL0",
    		"PMINTENSET_EL1",
    		"PMEVCNTR0_EL0",
    		"PMEVCNTR1_EL0",
    		"PMEVCNTR2_EL0",
    		"PMEVCNTR3_EL0",
    		"PMEVCNTR4_EL0",
    		"PMEVCNTR5_EL0",
    		"PMEVTYPER0_EL0",
    		"PMEVTYPER1_EL0",
    		"PMEVTYPER2_EL0",
    		"PMEVTYPER3_EL0",
    		"PMEVTYPER4_EL0",
    		"PMEVTYPER5_EL0",
    		"PMCCFILTR_EL0",
    		"SCR_EL3",
    		"CPTR_EL3",
    		"MDCR_EL3",
    		"CNTKCTL_EL1",
    		"CNTP_TVAL_EL0",
    		"CNTP_CTL_EL0",
    		"CNTV_TVAL_EL0",
    		"CNTV_CTL_EL0",
    		"CNTHCTL_EL2",
    		"CNTHP_TVAL_EL2",
    		"CNTHP_CTL_EL2",
    		"CNTPS_TVAL_EL1",
    		"CNTPS_CTL_EL1",
    		"L2ECTRL_EL1",
    		"L2ACTLR_EL1",
    		"GICC_CTRL",
    		"GICC_PMR",
    		"GICC_BPR",
    		"GICC_RPR",
    		"GICC_HPPIR",
    		"GICC_ABPR",
    		"GICC_AHPPIR",
    		"GICC_APR0",
    		"GICC_NSAPR0",
    		"GICD_CTLR",
    		"GICD_IGROUPR0-5",
    		"GICD_ISENABLER0-5",
    		"GICD_ISPENDR0-5",
    		"GICD_ISACTIVER0-5",
    		"GICD_IPRIORITYR0-47",
    		"GICD_ITARGETSR0-47",
    		"GICD_ICFGR0-11",
    		"GICD_PPISR",
    		"GICD_SPISR0-4",
    		"GICD_SPENDSGIR0-3"


    };

	// Call the assembly function and pass the array's pointer
	get_32register_values(register_values);

	// Print register values along with their names
	for (int i = 0; i < 58; ++i) {
		xil_printf("\n\r%s: 0x%08x\n", register_names[i], register_values[i]);
	}
}

void printRegister()
{
	unsigned long value = get_sctlr_el1_value();
	xil_printf("GICC_CTRL Value: 0x%lx\n", value);
	return 0;
}

int main()
{
    init_platform();
    int x = add(5,0);
    int y = subtract(5,0);
    uintptr_t baseAddress = 0x000c0c0;  // Base address of the stack
    size_t size = 12288;  // Size of the stack in bytes
    //printStack(baseAddress, size);
    //print32BitRegisters();
    printRegister();
    cleanup_platform();
    return 0;
}

int add(int a, int b)
{
	return a + b;
}

int subtract(int a, int b)
{
	return a - b;
}
