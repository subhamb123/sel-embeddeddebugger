0000000000000000 l    d  .text	0000000000000000 .text
0000000000002c80 l    d  .init	0000000000000000 .init
0000000000002cc0 l    d  .fini	0000000000000000 .fini
0000000000002d00 l    d  .rodata	0000000000000000 .rodata
0000000000003801 l    d  .rodata1	0000000000000000 .rodata1
0000000000003840 l    d  .sdata2	0000000000000000 .sdata2
0000000000003840 l    d  .sbss2	0000000000000000 .sbss2
0000000000003840 l    d  .data	0000000000000000 .data
0000000000004088 l    d  .data1	0000000000000000 .data1
00000000000040c0 l    d  .note.gnu.build-id	0000000000000000 .note.gnu.build-id
00000000000040e4 l    d  .ctors	0000000000000000 .ctors
0000000000004100 l    d  .dtors	0000000000000000 .dtors
0000000000004100 l    d  .eh_frame	0000000000000000 .eh_frame
0000000000005000 l    d  .mmu_tbl0	0000000000000000 .mmu_tbl0
0000000000006000 l    d  .mmu_tbl1	0000000000000000 .mmu_tbl1
0000000000008000 l    d  .mmu_tbl2	0000000000000000 .mmu_tbl2
000000000000c000 l    d  .preinit_array	0000000000000000 .preinit_array
000000000000c000 l    d  .init_array	0000000000000000 .init_array
000000000000c008 l    d  .fini_array	0000000000000000 .fini_array
000000000000c048 l    d  .sdata	0000000000000000 .sdata
000000000000c080 l    d  .sbss	0000000000000000 .sbss
000000000000c080 l    d  .tdata	0000000000000000 .tdata
000000000000c080 l    d  .tbss	0000000000000000 .tbss
000000000000c080 l    d  .bss	0000000000000000 .bss
000000000000c0c0 l    d  .heap	0000000000000000 .heap
000000000000e0c0 l    d  .stack	0000000000000000 .stack
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .debug_macro	0000000000000000 .debug_macro
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    d  .debug_loclists	0000000000000000 .debug_loclists
0000000000000000 l    d  .debug_rnglists	0000000000000000 .debug_rnglists
0000000000000000 l    df *ABS*	0000000000000000 asm_vectors.o
0000000000000210 l       *ABS*	0000000000000000 FPUContextSize
0000000000000000 l       .text	0000000000000000 VBAR
0000000000000384 l       .text	0000000000000000 SynchronousInterruptHandler
0000000000000488 l       .text	0000000000000000 IRQInterruptHandler
0000000000000584 l       .text	0000000000000000 FIQInterruptHandler
0000000000000680 l       .text	0000000000000000 SErrorInterruptHandler
0000000000000454 l       .text	0000000000000000 synchronoushandler
00000000000003f8 l       .text	0000000000000000 storefloat
0000000000000700 l       .text	0000000000000000 FPUContext
0000000000000910 l       .text	0000000000000000 FPUContextBase
0000000000000458 l       .text	0000000000000000 restorecontext
0000000000000540 l       .text	0000000000000000 RestorePrevState
000000000000063c l       .text	0000000000000000 RestorePrevStatefiq
0000000000000000 l    df *ABS*	0000000000000000 boot.o
0000000000000000 l       *ABS*	0000000000000000 TT_S1_FAULT
0000000000000003 l       *ABS*	0000000000000000 TT_S1_TABLE
00000000fd5c0040 l       *ABS*	0000000000000000 rvbar_base
0000000005f5dd19 l       *ABS*	0000000000000000 counterfreq
0000000000000005 l       *ABS*	0000000000000000 MODE_EL1
00000000000001c0 l       *ABS*	0000000000000000 DAIF_BIT
00000000000009b4 l       .text	0000000000000000 OKToRun
00000000000009cc l       .text	0000000000000000 InitEL3
0000000000000ab4 l       .text	0000000000000000 InitEL1
0000000000000ab8 l       .text	0000000000000000 error
0000000000000abc l       .text	0000000000000000 invalidate_dcaches
0000000000000b44 l       .text	0000000000000000 invalidateCaches_end
0000000000000ad4 l       .text	0000000000000000 invalidateCaches_flush_level
0000000000000b38 l       .text	0000000000000000 invalidateCaches_next_level
0000000000000b0c l       .text	0000000000000000 invalidateCaches_flush_set
0000000000000b10 l       .text	0000000000000000 invalidateCaches_flush_way
0000000000000000 l    df *ABS*	0000000000000000 crti.o
0000000000000000 l    df *ABS*	0000000000000000 crtstuff.c
0000000000004100 l     O .eh_frame	0000000000000000 
0000000000000b90 l     F .text	0000000000000000 deregister_tm_clones
0000000000000bc0 l     F .text	0000000000000000 register_tm_clones
0000000000000c00 l     F .text	0000000000000000 __do_global_dtors_aux
000000000000c080 l     O .bss	0000000000000001 completed.1
000000000000c040 l     O .fini_array	0000000000000000 __do_global_dtors_aux_fini_array_entry
0000000000000c50 l     F .text	0000000000000000 frame_dummy
000000000000c088 l     O .bss	0000000000000030 object.0
000000000000c000 l     O .init_array	0000000000000000 __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*	0000000000000000 crt0.o
0000000000000000 l    df *ABS*	0000000000000000 helloworld.c
0000000000000000 l    df *ABS*	0000000000000000 platform.c
0000000000000000 l    df *ABS*	0000000000000000 reg32.o
0000000000000000 l    df *ABS*	0000000000000000 reg64.o
0000000000000000 l    df *ABS*	0000000000000000 regSP.o
0000000000000000 l    df *ABS*	0000000000000000 regV.o
0000000000000000 l    df *ABS*	0000000000000000 regVBAR_EL2.o
0000000000000000 l    df *ABS*	0000000000000000 regX.o
0000000000000000 l    df *ABS*	0000000000000000 regx0.o
0000000000000000 l    df *ABS*	0000000000000000 regx1.o
0000000000000000 l    df *ABS*	0000000000000000 snapshot.c
0000000000000000 l    df *ABS*	0000000000000000 translation_table.o
0000000000000000 l       *ABS*	0000000000000000 reserved
0000000000000705 l       *ABS*	0000000000000000 Memory
0060000000000409 l       *ABS*	0000000000000000 Device
00000000ffe00000 l       *ABS*	0000000000000000 SECT
0000000800000000 l       *ABS*	0000000000000000 DDR_1_START
000000087fffffff l       *ABS*	0000000000000000 DDR_1_END
0000000080000000 l       *ABS*	0000000000000000 DDR_1_SIZE
0000000000000002 l       *ABS*	0000000000000000 DDR_1_REG
000000000000001e l       *ABS*	0000000000000000 UNDEF_1_REG
0000000000000000 l       *ABS*	0000000000000000 DDR_0_START
000000007fffffff l       *ABS*	0000000000000000 DDR_0_END
0000000080000000 l       *ABS*	0000000000000000 DDR_0_SIZE
0000000000000400 l       *ABS*	0000000000000000 DDR_0_REG
0000000000000000 l       *ABS*	0000000000000000 UNDEF_0_REG
0000000000000000 l    df *ABS*	0000000000000000 vectors.c
0000000000000000 l    df *ABS*	0000000000000000 xil-crt0.S
00000000fd5c0090 l       *ABS*	0000000000000000 APU_PWRCTL
0000000000000000 l    df *ABS*	0000000000000000 xil_exception.c
0000000000001a20 l     F .text	000000000000000c Xil_ExceptionNullHandler
0000000000001a30 l     F .text	000000000000000c Xil_SyncErrorHandler
0000000000001a40 l     F .text	000000000000000c Xil_SErrorHandler
0000000000000000 l    df *ABS*	0000000000000000 xil_printf.c
0000000000001ae0 l     F .text	0000000000000194 outnum
0000000000001c74 l     F .text	00000000000001a0 outnum1
0000000000000000 l    df *ABS*	0000000000000000 outbyte.c
0000000000000000 l    df *ABS*	0000000000000000 xuartps_hw.c
0000000000000000 l    df *ABS*	0000000000000000 lib_a-atexit.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-ctype_.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-exit.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-fini.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-impure.o
00000000000038d0 l     O .data	0000000000000748 impure_data
0000000000000000 l    df *ABS*	0000000000000000 lib_a-init.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-memcpy.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-memset.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-strlen.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-__atexit.o
0000000000000000 l    df *ABS*	0000000000000000 lib_a-__call_atexit.o
0000000000000000 l    df *ABS*	0000000000000000 _exit.c
0000000000000000 l    df *ABS*	0000000000000000 crtstuff.c
0000000000004100 l     O .eh_frame	0000000000000000 __FRAME_END__
0000000000000000 l    df *ABS*	0000000000000000 crtn.o
0000000000000000 l    df *ABS*	0000000000000000 
0000000000004018 l     O .data	0000000000000000 _GLOBAL_OFFSET_TABLE_
00000000000104c0 g       .stack	0000000000000000 _el1_stack_end
0000000000008000 g       .mmu_tbl2	0000000000000000 __mmu_tbl2_start
0000000000001298 g     F .text	00000000000000c4 start_up
0000000000001930 g     F .text	0000000000000018 SynchronousInterrupt
0000000000000000 g       .text	0000000000000000 _vector_table
0000000000004104 g       .eh_frame	0000000000000000 __eh_framehdr_start
0000000000004100 g       .ctors	0000000000000000 ___CTORS_LIST___
0000000000000400 g       *ABS*	0000000000000000 _EL2_STACK_SIZE
0000000000000400 g       *ABS*	0000000000000000 _EL0_STACK_SIZE
0000000000000d40 g     F .text	000000000000000c enable_caches
000000000000c000 g       .mmu_tbl2	0000000000000000 __exidx_end
00000000000023f0 g     F .text	0000000000000024 XUartPs_SendByte
0000000000001a50 g     F .text	0000000000000008 Xil_ExceptionInit
000000000000151c g     F .text	00000000000001e4 print_gicr_registers
000000000000135c g     F .text	0000000000000094 print_stack
000000000000c080 g       .sbss	0000000000000000 __sbss_start
0000000000002414 g     F .text	0000000000000020 XUartPs_RecvByte
00000000000104c0 g       .stack	0000000000000000 __el2_stack
00000000000100c0 g       .stack	0000000000000000 _el2_stack_end
0000000000004100 g       .dtors	0000000000000000 __fixup_start
0000000000000938 g       .text	0000000000000000 _boot
0000000000004100 g       .dtors	0000000000000000 __fixup_end
0000000000002600 g     F .text	000000000000016c memcpy
00000000000011e8 g       .text	0000000000000000 get_Xregister_values
0000000000004088 g     O .data	0000000000000000 .hidden __TMC_END__
000000000000c080 g       .sdata	0000000000000000 __sdata_start
0000000000005010 g       .mmu_tbl0	0000000000000000 __mmu_tbl0_end
0000000000000f10 g       .text	0000000000000000 get_64register_values
0000000000004100 g       .dtors	0000000000000000 __DTOR_END__
0000000000000d64 g     F .text	0000000000000024 init_platform
000000000000c048 g       .fini_array	0000000000000000 __fini_array_end
0000000000003801 g       .rodata	0000000000000000 __rodata_end
00000000000040c0 g       .data1	0000000000000000 __data1_start
0000000000003840 g       .sbss2	0000000000000000 __sbss2_end
000000000000c080 g       .bss	0000000000000000 __bss_start__
0000000000003840 g     O .data	0000000000000000 .hidden __dso_handle
0000000000000d58 g     F .text	000000000000000c init_uart
0000000000008000 g       .mmu_tbl2	0000000000000000 MMUTableL2
000000000000e0c0 g       .heap	0000000000000000 _heap_end
00000000000017c0 g     F .text	000000000000007c print_v_registers
000000000000c000 g       .mmu_tbl2	0000000000000000 __exidx_start
0000000000001910 g     F .text	0000000000000018 IRQInterrupt
00000000000037e8 g     O .rodata	0000000000000008 _global_impure_ptr
0000000000002560 g     F .text	0000000000000098 __libc_init_array
0000000000003840 g       .rodata1	0000000000000000 __rodata1_start
0000000000000c90 g       .text	0000000000000000 _mainCRTStartup
000000000000c048 g       .fini_array	0000000000000000 __ARM.attributes_end
0000000000001988 g       .text	0000000000000084 _startup
000000000000c080 g       .tbss	0000000000000000 __tbss_start
0000000000002c80 g     F .init	0000000000000000 _init
0000000000008000 g       .mmu_tbl1	0000000000000000 __mmu_tbl1_end
0000000000002510 g     F .text	0000000000000050 __libc_fini_array
0000000000001a60 g     F .text	0000000000000020 Xil_ExceptionRegisterHandler
000000000000c0c0 g       .heap	0000000000000000 _heap_start
000000000000c080 g       .sbss	0000000000000000 __sbss_end
0000000000000938 g       .text	0000000000000000 _prestart
0000000000000fd8 g       .text	0000000000000000 get_Vregister_values
0000000000002364 g     F .text	0000000000000074 xil_printf
0000000000001700 g     F .text	00000000000000c0 print_64_bit_system_registers
0000000000004100 g       .ctors	0000000000000000 __CTOR_LIST__
0000000000003840 g       .sbss2	0000000000000000 __sbss2_start
000000000000c0c0 g       .bss	0000000000000000 __bss_end__
000000000000e0c0 g       .stack	0000000000000000 _el3_stack_end
0000000000002b50 g     F .text	0000000000000118 __call_exitprocs
00000000000013f0 g     F .text	0000000000000088 print_x_registers
0000000000000c90 g       .text	0000000000000000 _start
0000000000002d00 g       .rodata	0000000000000000 __rodata_start
000000000000c0b8 g     O .bss	0000000000000008 synchronous_interrupt_handler
0000000000002ac0 g     F .text	0000000000000090 __register_exitproc
000000000000c080 g       *ABS*	0000000000000000 _SDA_BASE_
0000000000004088 g       .data	0000000000000000 __data_end
000000000000c0c0 g       .heap	0000000000000000 HeapBase
0000000000000800 g       *ABS*	0000000000000000 _EL1_STACK_SIZE
0000000000000fd0 g       .text	0000000000000000 get_SPregister_value
0000000000000918 g       .text	0000000000000000 FPUStatus
0000000000005000 g       .mmu_tbl0	0000000000000000 MMUTableL0
0000000000004104 g       .eh_frame	0000000000000000 __eh_framehdr_end
00000000000023e0 g     F .text	0000000000000010 outbyte
000000000000c040 g       .fini_array	0000000000000000 __fini_array_start
0000000000002000 g       *ABS*	0000000000000000 _STACK_SIZE
000000000000c080 g       .tdata	0000000000000000 __tdata_start
000000000000c080 g       .tdata	0000000000000000 __tdata_end
0000000000002780 g     F .text	00000000000001dc memset
000000000000183c g     F .text	0000000000000038 print_sp_register
0000000000000d00 g     F .text	0000000000000040 main
0000000000000da8 g       .text	0000000000000000 get_32register_values
0000000000002000 g       *ABS*	0000000000000000 _HEAP_SIZE
0000000000001950 g     F .text	0000000000000018 SErrorInterrupt
0000000000003850 g     O .data	0000000000000008 size
000000000000c008 g       .init_array	0000000000000000 __init_array_end
0000000000000d4c g     F .text	000000000000000c disable_caches
00000000000100c0 g       .stack	0000000000000000 __el3_stack
0000000000004100 g       .dtors	0000000000000000 ___DTORS_END___
000000000000c080 g       .sdata	0000000000000000 __sdata_end
0000000000003840 g       .sdata2	0000000000000000 __sdata2_start
0000000000004100 g       .ctors	0000000000000000 __CTOR_END__
0000000000004100 g       .dtors	0000000000000000 ___DTORS_LIST___
0000000000004100 g       .dtors	0000000000000000 __DTOR_LIST__
0000000000010cc0 g       .stack	0000000000000000 _el0_stack_end
0000000000002cc0 g     F .fini	0000000000000000 _fini
0000000000010cc0 g       .stack	0000000000000000 __el1_stack
00000000000024b0 g     F .text	0000000000000018 atexit
00000000000038c0 g     O .data	0000000000000008 _impure_ptr
000000000000c000 g       .preinit_array	0000000000000000 __preinit_array_end
0000000000003840 g       .sdata2	0000000000000000 __sdata2_end
00000000000110c0 g       .stack	0000000000000000 __el0_stack
0000000000003858 g     O .data	0000000000000060 XExc_VectorTable
0000000000001270 g     F .text	0000000000000028 set_exception_vector_table_entry
0000000000004100 g       .ctors	0000000000000000 ___CTORS_END___
0000000000001ab0 g     F .text	0000000000000028 Xil_ExceptionRemoveHandler
000000000000e0c0 g       .heap	0000000000000000 HeapLimit
00000000000110c0 g       .stack	0000000000000000 _end
0000000000002434 g     F .text	0000000000000074 XUartPs_ResetHw
0000000000003840 g       .rodata1	0000000000000000 __rodata1_end
0000000000001e14 g     F .text	0000000000000550 xil_vprintf
0000000000000d88 g     F .text	0000000000000020 cleanup_platform
00000000000040c0 g       .data1	0000000000000000 __data1_end
0000000000001264 g       .text	0000000000000000 get_x0register_value
000000000000c0c0 g       .heap	0000000000000000 _heap
00000000000024d0 g     F .text	0000000000000038 exit
000000000000c000 g       .mmu_tbl2	0000000000000000 __mmu_tbl2_end
0000000000006000 g       .mmu_tbl1	0000000000000000 __mmu_tbl1_start
000000000000c080 g       .tbss	0000000000000000 __tbss_end
00000000000036e0 g     O .rodata	0000000000000101 _ctype_
000000000000c000 g       .init_array	0000000000000000 __init_array_start
0000000000002c70  w    F .text	000000000000000c _exit
0000000000003848 g     O .data	0000000000000008 baseAddress
0000000000001478 g     F .text	00000000000000a4 print_32_bit_system_registers
00000000000018f0 g     F .text	0000000000000018 FIQInterrupt
0000000000002980 g     F .text	0000000000000140 strlen
0000000000000cdc  w      .text	0000000000000000 _cpu_init_hook
0000000000003840 g       .data	0000000000000000 __data_start
000000000000c000 g       .preinit_array	0000000000000000 __preinit_array_start
0000000000005000 g       .mmu_tbl0	0000000000000000 __mmu_tbl0_start
0000000000006000 g       .mmu_tbl1	0000000000000000 MMUTableL1
0000000000003840 g       *ABS*	0000000000000000 _SDA2_BASE_
0000000000001a80 g     F .text	0000000000000028 Xil_GetExceptionRegisterHandler
0000000000001268 g       .text	0000000000000000 get_x1register_value
00000000000011e0 g       .text	0000000000000000 get_vbar_el1_register_value
000000000000c048 g       .fini_array	0000000000000000 __ARM.attributes_start
0000000000001874 g     F .text	000000000000007c exception_handler

